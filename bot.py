import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode
from aiogram import Router
from aiogram.client.default import DefaultBotProperties
from aiogram .types import CallbackQuery
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from keyboards.main import main_menu
from catalog.data import catalog_items
from keyboards.catalog import get_catalog_keyboard
from uuid import uuid4
from catalog.db import init_db, add_item, get_all_items
from catalog.db import delete_item, update_item, update_item_field
from keyboards.admin import get_admin_item_keyboard, get_edit_field_keyboard
from config import API_TOKEN, ADMIN_IDS


bot = Bot(token=API_TOKEN)

router = Router()
user_cart = {}


@router.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ö—É–¥–æ–∂–Ω–∏—Ü—ã \n\n –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                         reply_markup=main_menu)


async def main():
    bot = Bot(
        token=API_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)

    init_db()
    await dp.start_polling(bot)


# @router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
# async def show_catalog(message: Message):
    # await message.answer("–ü–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è —Ç–æ–≤–∞—Ä—ã!")


@router.message(F.text == "üë©‚Äçüé® –û —Ö—É–¥–æ–∂–Ω–∏—Ü–µ")
async def about_artist(message: Message):
    await message.answer("""–ú—É–ª—å—Ç–∏–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–∞—è —Ö—É–¥–æ–∂–Ω–∏—Ü–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∏—Ü–∞. –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å —Ç–µ–º–∞–º–∏ –Ω–∞—Ç—É—Ä—Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
—á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø—Ä–∏—Ä–æ–¥—ã, –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–º–∏, —Ç—Ä–∞–Ω—Å–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º–∏ –∏ —Ç—Ä–∞–Ω—Å—Ü–µ–Ω–¥–µ–Ω—Ç–Ω—ã–º–∏ –æ–ø—ã—Ç–∞–º–∏ –≤ –∫—É–ª—å—Ç—É—Ä–µ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∏ –Ω–µ—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ, —è–≤–ª–µ–Ω–∏—è–º–∏, —É—Å–∫–æ–ª—å–∑–∞—é—â–∏–º–∏ –æ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–ª–∞–∑–∞. –í –¥–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–∞–±–æ—Ç–µ —Å –≥—Ä–∞—Ñ–∏–∫–æ–π, –∂–∏–≤–æ–ø–∏—Å—å—é, –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–µ–π.
\n
–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ BIZAR - https://bizar.art/author/katya-lesun-bb8r
–º–æ—è –∫–æ–ª–ª–∞–±–æ—Ä–∞—Ü–∏—è —Å BEFREE - https://collab.befree.ru/katya_lesun""")


@router.message(F.text == "üì± –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: Message):
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ Telegram: @katyalesun\n–ò–ª–∏ –ø–æ e-mail: katyalesunstudio@gmail.com")


# @router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
# async def show_catalog(message: Message):
    # for item in catalog_items:
       # await message.answer_photo(
           # photo=item["photo"],
           # caption=f"<b>{item['title']}</b>\n\n{item['description']}\n\n–¶–µ–Ω–∞: <b>{item['price']}</b>",
           # reply_markup=get_catalog_keyboard(item["id"])
        #)

@router.message(F.text == "üé® –ö–∞—Ç–∞–ª–æ–≥")
async def show_catalog(message: Message):
    items = get_all_items()
    if not items:
        await message.answer("–ü–æ–∫–∞ –∫–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ /add")
        return

    for item in items:
        await message.answer_photo(
            photo=item["photo"],
            caption=f"<b>{item['title']}</b>\n\n{item['description']}\n\n–¶–µ–Ω–∞: <b>{item['price']}</b>",
            reply_markup=get_catalog_keyboard(item["id"])
        )


@router.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery):
    item_id = callback.data.split("_")[1]
    user_id = callback.from_user.id

    item = next((item for item in get_all_items() if item["id"] == item_id), None)
    if item is None:
        await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    user_cart.setdefault(user_id, []).append(item)
    await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {item['title']}")


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: Message):
    user_id = message.from_user.id
    cart = user_cart.get(user_id, [])

    if not cart:
        await message.answer("üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    text = "<b>üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
    total = 0

    for item in cart:
        text += f"‚Ä¢ {item['title']} ‚Äî {item['price']}\n"
        total += int(item['price'].replace("‚ÇΩ", "").strip())

    text += f"\n<b>–ò—Ç–æ–≥–æ:</b> {total}‚ÇΩ"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_cart")],
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")]
    ])

    await message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_cart[user_id] = []
    await callback.message.edit_text("üß∫ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
    await callback.answer()


# @router.callback_query(F.data == "checkout")
# async def checkout(callback: CallbackQuery):
    # await callback.message.edit_text("‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    # user_cart[callback.from_user.id] = []
    # await callback.answer()

class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()


@router.callback_query(F.data == "checkout")
async def checkout(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üìõ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(OrderStates.waiting_for_name)
    await callback.answer()


@router.message(OrderStates.waiting_for_name)
async def get_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üìû –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(OrderStates.waiting_for_phone)


@router.message(OrderStates.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    data = await state.get_data()

    user_id = message.from_user.id
    cart = user_cart.get(user_id, [])

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–∫–∞–∑–∞
    text = f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, {data['name']}!\n\n"
    text += "üß∫ –í–∞—à –∑–∞–∫–∞–∑:\n"
    for item in cart:
        text += f"‚Ä¢ {item['title']} ‚Äî {item['price']}\n"
    total = sum(int(item['price'].replace("‚ÇΩ", "").strip()) for item in cart)
    text += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
    text += f"üí∞ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"

    await message.answer(text)
    await state.clear()
    user_cart[user_id] = []  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É


class AddArtwork(StatesGroup):
    waiting_for_photo = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()


@router.message(F.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω–∫–µ.")
        return

    kb = types.ReplyKeyboardMarkup(keyboard=[
        [types.KeyboardButton(text="/add")],
        [types.KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")]
    ], resize_keyboard=True)

    await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n- –ù–∞–∂–º–∏—Ç–µ /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä.",
                         reply_markup=kb)


@router.message(F.text == "/add")
async def start_add_artwork(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    await message.answer("üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–∏–Ω—ã:")
    await state.set_state(AddArtwork.waiting_for_photo)


@router.message(AddArtwork.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω—ã:")
    await state.set_state(AddArtwork.waiting_for_title)


@router.message(AddArtwork.waiting_for_title)
async def process_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(AddArtwork.waiting_for_description)


@router.message(AddArtwork.waiting_for_description)
async def process_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500‚ÇΩ):")
    await state.set_state(AddArtwork.waiting_for_price)


@router.message(AddArtwork.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    data = await state.update_data(price=message.text)

    new_item = {
        "id": str(uuid4()),  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        "title": data["title"],
        "description": data["description"],
        "price": data["price"],
        "photo": data["photo"]
    }

    add_item(new_item)  # ‚¨Ö —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ db.py)

    await message.answer("‚úÖ –ö–∞—Ä—Ç–∏–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥!")
    await state.clear()


@router.message(F.text == "/admin_catalog")
async def admin_catalog(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    items = get_all_items()
    if not items:
        await message.answer("üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return

    for item in items:
        await message.answer_photo(
            photo=item["photo"],
            caption=f"<b>{item['title']}</b>\n\n{item['description']}\n–¶–µ–Ω–∞: <b>{item['price']}</b>",
            reply_markup=get_admin_item_keyboard(item["id"]),
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("delete_"))
async def handle_delete(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤", show_alert=True)
        return

    item_id = callback.data.split("_")[1]
    delete_item(item_id)

    await callback.message.edit_caption("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")
    await callback.answer("–£–¥–∞–ª–µ–Ω–æ")


class EditArtwork(StatesGroup):
    waiting_for_photo = State()
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_price = State()


@router.callback_query(F.data.startswith("edit_"))
async def choose_edit_field(callback: CallbackQuery):
    item_id = callback.data.split("_")[1]
    kb = get_edit_field_keyboard(item_id)  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏: editphoto_<id>, edittitle_<id> –∏ —Ç.–¥.
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)
    await callback.answer()


@router.message(EditArtwork.waiting_for_photo, F.photo)
async def edit_photo(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id
    await state.update_data(photo=photo)
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(EditArtwork.waiting_for_title)


@router.message(EditArtwork.waiting_for_title)
async def edit_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(EditArtwork.waiting_for_description)


@router.message(EditArtwork.waiting_for_description)
async def edit_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2500‚ÇΩ):")
    await state.set_state(EditArtwork.waiting_for_price)


@router.message(EditArtwork.waiting_for_price)
async def edit_price(message: Message, state: FSMContext):
    data = await state.update_data(price=message.text)

    updated_item = {
        "id": data["id"],
        "photo": data["photo"],
        "title": data["title"],
        "description": data["description"],
        "price": data["price"]
    }

    update_item(updated_item)  # —Å–º. —à–∞–≥ 5

    await message.answer("‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!")
    await state.clear()


@router.callback_query(F.data.startswith("choose_edit_"))
async def choose_edit_field(callback: CallbackQuery):
    item_id = callback.data.split("_")[2]
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=get_edit_field_keyboard(item_id))
    await callback.answer()


class EditField(StatesGroup):
    editing_photo = State()
    editing_title = State()
    editing_description = State()
    editing_price = State()


@router.callback_query(F.data.startswith("editphoto_"))
async def ask_new_photo(callback: CallbackQuery, state: FSMContext):
    item_id = callback.data.split("_")[1]
    await state.update_data(id=item_id)
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:")
    await state.set_state(EditField.editing_photo)
    await callback.answer()


@router.message(EditField.editing_photo, F.photo)
async def save_new_photo(message: Message, state: FSMContext):
    data = await state.get_data()
    new_photo = message.photo[-1].file_id
    update_item_field(data["id"], "photo", new_photo)
    await message.answer("‚úÖ –§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()


@router.callback_query(F.data.startswith("edittitle_"))
async def ask_new_title(callback: CallbackQuery, state: FSMContext):
    item_id = callback.data.split("_")[1]
    await state.update_data(id=item_id)
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    await state.set_state(EditField.editing_title)
    await callback.answer()


@router.message(EditField.editing_title)
async def save_new_title(message: Message, state: FSMContext):
    data = await state.get_data()
    update_item_field(data["id"], "title", message.text)
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()


@router.callback_query(F.data.startswith("editdesc_"))
async def ask_new_description(callback: CallbackQuery, state: FSMContext):
    item_id = callback.data.split("_")[1]
    await state.update_data(id=item_id)
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
    await state.set_state(EditField.editing_description)
    await callback.answer()


@router.message(EditField.editing_description)
async def save_new_description(message: Message, state: FSMContext):
    data = await state.get_data()
    update_item_field(data["id"], "description", message.text)
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await state.clear()


@router.callback_query(F.data.startswith("editprice_"))
async def ask_new_price(callback: CallbackQuery, state: FSMContext):
    item_id = callback.data.split("_")[1]
    await state.update_data(id=item_id)
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
    await state.set_state(EditField.editing_price)
    await callback.answer()


@router.message(EditField.editing_price)
async def save_new_price(message: Message, state: FSMContext):
    data = await state.get_data()
    update_item_field(data["id"], "price", message.text)
    await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()


if __name__ == "__main__":
    asyncio.run(main())
